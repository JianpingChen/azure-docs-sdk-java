### YamlMime:JavaMember
uid: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys*"
fullName: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys"
name: "listPropertiesOfKeys"
nameWithType: "KeyClient.listPropertiesOfKeys"
members:
- uid: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys()"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys()"
  name: "listPropertiesOfKeys()"
  nameWithType: "KeyClient.listPropertiesOfKeys()"
  summary: "List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain\n the public part of a stored key. The List operation is applicable to all key types and the individual key\n response in the list is represented by <xref uid=\"KeyProperties\" data-throw-if-not-resolved=\"false\">KeyProperties</xref> as only the key identifier, attributes and tags are\n provided in the response. The key material and individual key versions are not listed in the response. This\n operation requires the <code>keys/list</code> permission.\n\n <p>It is possible to get full keys with key material from this information. Loop over the <xref uid=\"KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref>\n and call <xref uid=\"KeyClient#getKey(String, String)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(String, String)</xref>. This will return the <xref uid=\"KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref> with key material\n included of its latest version.</p>\n <pre>\n for &#40;KeyProperties key : keyClient.listPropertiesOfKeys&#40;&#41;&#41; &#123;\n     KeyVaultKey keyWithMaterial = keyClient.getKey&#40;key.getName&#40;&#41;, key.getVersion&#40;&#41;&#41;;\n     System.out.printf&#40;&quot;Received key with name %s and type %s&quot;, keyWithMaterial.getName&#40;&#41;,\n         keyWithMaterial.getKeyType&#40;&#41;&#41;;\n &#125;\n </pre>\n\n <p><strong>Code Samples to iterate keys by page</strong></p>\n <p>It is possible to get full keys with key material from this information. Iterate over all the <xref uid=\"KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> by page and call <xref uid=\"KeyClient#getKey(String, String)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(String, String)</xref>. This will return the <xref uid=\"KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref> with key\n material included of its latest version.</p>\n <pre>\n keyClient.listPropertiesOfKeys&#40;&#41;.iterableByPage&#40;&#41;.forEach&#40;resp -&gt; &#123;\n     System.out.printf&#40;&quot;Got response headers . Url: %s, Status code: %d %n&quot;,\n         resp.getRequest&#40;&#41;.getUrl&#40;&#41;, resp.getStatusCode&#40;&#41;&#41;;\n     resp.getItems&#40;&#41;.forEach&#40;value -&gt; &#123;\n         KeyVaultKey keyWithMaterial = keyClient.getKey&#40;value.getName&#40;&#41;, value.getVersion&#40;&#41;&#41;;\n         System.out.printf&#40;&quot;Received key with name %s and type %s %n&quot;, keyWithMaterial.getName&#40;&#41;,\n             keyWithMaterial.getKeyType&#40;&#41;&#41;;\n     &#125;&#41;;\n &#125;&#41;;\n </pre>"
  syntax: "public PagedIterable<KeyProperties> listPropertiesOfKeys()"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> of all the keys in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyProperties?alt=com.azure.security.keyvault.keys.models.KeyProperties&text=KeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys(com.azure.core.util.Context)"
  fullName: "com.azure.security.keyvault.keys.KeyClient.listPropertiesOfKeys(Context context)"
  name: "listPropertiesOfKeys(Context context)"
  nameWithType: "KeyClient.listPropertiesOfKeys(Context context)"
  summary: "List keys in the key vault. Retrieves a list of the keys in the Key Vault as JSON Web Key structures that contain\n the public part of a stored key. The List operation is applicable to all key types and the individual key\n response in the list is represented by <xref uid=\"KeyProperties\" data-throw-if-not-resolved=\"false\">KeyProperties</xref> as only the key identifier, attributes and tags are\n provided in the response. The key material and individual key versions are not listed in the response. This\n operation requires the <code>keys/list</code> permission.\n\n <p>It is possible to get full keys with key material from this information. Loop over the <xref uid=\"KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref>\n and call <xref uid=\"KeyClient#getKey(String, String)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(String, String)</xref>. This will return the <xref uid=\"KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref> with key material\n included of its latest version.</p>\n <pre>\n for &#40;KeyProperties key : keyClient.listPropertiesOfKeys&#40;new Context&#40;key2, value2&#41;&#41;&#41; &#123;\n     KeyVaultKey keyWithMaterial = keyClient.getKey&#40;key.getName&#40;&#41;, key.getVersion&#40;&#41;&#41;;\n     System.out.printf&#40;&quot;Received key with name %s and type %s&quot;, keyWithMaterial.getName&#40;&#41;,\n         keyWithMaterial.getKeyType&#40;&#41;&#41;;\n &#125;\n </pre>\n\n <p><strong>Code Samples to iterate keys by page</strong></p>\n <p>It is possible to get full keys with key material from this information. Iterate over all the <xref uid=\"KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> by page and call <xref uid=\"KeyClient#getKey(String, String)\" data-throw-if-not-resolved=\"false\">KeyClient#getKey(String, String)</xref>. This will return the <xref uid=\"KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref> with key\n material included of its latest version.</p>\n <pre>\n keyClient.listPropertiesOfKeys&#40;&#41;.iterableByPage&#40;&#41;.forEach&#40;resp -&gt; &#123;\n     System.out.printf&#40;&quot;Got response headers . Url: %s, Status code: %d %n&quot;,\n         resp.getRequest&#40;&#41;.getUrl&#40;&#41;, resp.getStatusCode&#40;&#41;&#41;;\n     resp.getItems&#40;&#41;.forEach&#40;value -&gt; &#123;\n         KeyVaultKey keyWithMaterial = keyClient.getKey&#40;value.getName&#40;&#41;, value.getVersion&#40;&#41;&#41;;\n         System.out.printf&#40;&quot;Received key with name %s and type %s %n&quot;, keyWithMaterial.getName&#40;&#41;,\n             keyWithMaterial.getKeyType&#40;&#41;&#41;;\n     &#125;&#41;;\n &#125;&#41;;\n </pre>"
  parameters:
  - description: "Additional context that is passed through the Http pipeline during the service call."
    name: "context"
    type: "<xref href=\"com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public PagedIterable<KeyProperties> listPropertiesOfKeys(Context context)"
  returns:
    description: "<xref uid=\"com.azure.core.http.rest.PagedIterable\" data-throw-if-not-resolved=\"false\">PagedIterable</xref> of <xref uid=\"com.azure.security.keyvault.keys.models.KeyProperties\" data-throw-if-not-resolved=\"false\">key</xref> of all the keys in the vault."
    type: "<xref href=\"com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyProperties?alt=com.azure.security.keyvault.keys.models.KeyProperties&text=KeyProperties\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.keys"
artifact: com.azure:azure-security-keyvault-keys:4.2.0

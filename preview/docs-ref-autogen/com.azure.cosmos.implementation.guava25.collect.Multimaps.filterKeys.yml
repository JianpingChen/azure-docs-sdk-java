### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.filterKeys*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>filterKeys"
name: "<K,V>filterKeys"
nameWithType: "Multimaps.<K,V>filterKeys"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>filterKeys(com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>filterKeys(ListMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  name: "<K,V>filterKeys(ListMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  nameWithType: "Multimaps.<K,V>filterKeys(ListMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  summary: "Returns a multimap containing the mappings in <code>unfiltered</code> whose keys satisfy a\n predicate. The returned multimap is a live view of <code>unfiltered</code>; changes to one affect\n the other.\n\n <p>The resulting multimap's views have iterators that don't support <code>remove()</code>, but all\n other methods are supported by the multimap and its views. When adding a key that doesn't\n satisfy the predicate, the multimap's <code>put()</code>, <code>putAll()</code>, and <code>\n replaceValues()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>.\n\n <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered\n multimap or its views, only mappings whose keys satisfy the filter will be removed from the\n underlying multimap.\n\n <p>The returned multimap isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered multimap's methods, such as <code>size()</code>, iterate across every\n key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n copy.\n\n <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ListMultimap?alt=com.azure.cosmos.implementation.guava25.collect.ListMultimap&text=ListMultimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "keyPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static ListMultimap<K,V> <K,V>filterKeys(ListMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.ListMultimap?alt=com.azure.cosmos.implementation.guava25.collect.ListMultimap&text=ListMultimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>filterKeys(com.azure.cosmos.implementation.guava25.collect.Multimap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>filterKeys(Multimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  name: "<K,V>filterKeys(Multimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  nameWithType: "Multimaps.<K,V>filterKeys(Multimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  summary: "Returns a multimap containing the mappings in <code>unfiltered</code> whose keys satisfy a\n predicate. The returned multimap is a live view of <code>unfiltered</code>; changes to one affect\n the other.\n\n <p>The resulting multimap's views have iterators that don't support <code>remove()</code>, but all\n other methods are supported by the multimap and its views. When adding a key that doesn't\n satisfy the predicate, the multimap's <code>put()</code>, <code>putAll()</code>, and <code>\n replaceValues()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>.\n\n <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered\n multimap or its views, only mappings whose keys satisfy the filter will be removed from the\n underlying multimap.\n\n <p>The returned multimap isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered multimap's methods, such as <code>size()</code>, iterate across every\n key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n copy.\n\n <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Multimap?alt=com.azure.cosmos.implementation.guava25.collect.Multimap&text=Multimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "keyPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Multimap<K,V> <K,V>filterKeys(Multimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.Multimap?alt=com.azure.cosmos.implementation.guava25.collect.Multimap&text=Multimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>filterKeys(com.azure.cosmos.implementation.guava25.collect.SetMultimap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>filterKeys(SetMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  name: "<K,V>filterKeys(SetMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  nameWithType: "Multimaps.<K,V>filterKeys(SetMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  summary: "Returns a multimap containing the mappings in <code>unfiltered</code> whose keys satisfy a\n predicate. The returned multimap is a live view of <code>unfiltered</code>; changes to one affect\n the other.\n\n <p>The resulting multimap's views have iterators that don't support <code>remove()</code>, but all\n other methods are supported by the multimap and its views. When adding a key that doesn't\n satisfy the predicate, the multimap's <code>put()</code>, <code>putAll()</code>, and <code>\n replaceValues()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>.\n\n <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered\n multimap or its views, only mappings whose keys satisfy the filter will be removed from the\n underlying multimap.\n\n <p>The returned multimap isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered multimap's methods, such as <code>size()</code>, iterate across every\n key/value mapping in the underlying multimap and determine which satisfy the filter. When a\n live view is <i>not</i> needed, it may be faster to copy the filtered multimap and use the\n copy.\n\n <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.SetMultimap?alt=com.azure.cosmos.implementation.guava25.collect.SetMultimap&text=SetMultimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "keyPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static SetMultimap<K,V> <K,V>filterKeys(SetMultimap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.SetMultimap?alt=com.azure.cosmos.implementation.guava25.collect.SetMultimap&text=SetMultimap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.3.2-beta.2

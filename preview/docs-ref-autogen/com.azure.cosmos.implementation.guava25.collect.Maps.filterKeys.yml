### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Maps.filterKeys*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys"
name: "<K,V>filterKeys"
nameWithType: "Maps.<K,V>filterKeys"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(com.azure.cosmos.implementation.guava25.collect.BiMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(BiMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  name: "<K,V>filterKeys(BiMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  nameWithType: "Maps.<K,V>filterKeys(BiMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  summary: "Returns a bimap containing the mappings in <code>unfiltered</code> whose keys satisfy a predicate.\n The returned bimap is a live view of <code>unfiltered</code>; changes to one affect the other.\n\n <p>The resulting bimap's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have\n iterators that don't support <code>remove()</code>, but all other methods are supported by the bimap\n and its views. When given a key that doesn't satisfy the predicate, the bimap's <code>put()</code>,\n <code>forcePut()</code> and <code>putAll()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>.\n\n <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered\n bimap or its views, only mappings that satisfy the filter will be removed from the underlying\n bimap.\n\n <p>The returned bimap isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered bimap's methods, such as <code>size()</code>, iterate across every key in\n the underlying bimap and determine which satisfy the filter. When a live view is <i>not</i>\n needed, it may be faster to copy the filtered bimap and use the copy.\n\n <p><b>Warning:</b> <code>entryPredicate</code> must be <i>consistent with equals </i>, as documented\n at <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.BiMap?alt=com.azure.cosmos.implementation.guava25.collect.BiMap&text=BiMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "keyPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static BiMap<K,V> <K,V>filterKeys(BiMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  returns:
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.collect.BiMap?alt=com.azure.cosmos.implementation.guava25.collect.BiMap&text=BiMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(java.util.Map<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(Map<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  name: "<K,V>filterKeys(Map<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  nameWithType: "Maps.<K,V>filterKeys(Map<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  summary: "Returns a map containing the mappings in <code>unfiltered</code> whose keys satisfy a predicate. The\n returned map is a live view of <code>unfiltered</code>; changes to one affect the other.\n\n <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have\n iterators that don't support <code>remove()</code>, but all other methods are supported by the map\n and its views. When given a key that doesn't satisfy the predicate, the map's <code>put()</code> and\n <code>putAll()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>.\n\n <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map\n or its views, only mappings whose keys satisfy the filter will be removed from the underlying\n map.\n\n <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value\n mapping in the underlying map and determine which satisfy the filter. When a live view is\n <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n\n <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "keyPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Map<K,V> <K,V>filterKeys(Map<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  returns:
    type: "<xref href=\"java.util.Map?alt=java.util.Map&text=Map\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(java.util.NavigableMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(NavigableMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  name: "<K,V>filterKeys(NavigableMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  nameWithType: "Maps.<K,V>filterKeys(NavigableMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  summary: "Returns a navigable map containing the mappings in <code>unfiltered</code> whose keys satisfy a\n predicate. The returned map is a live view of <code>unfiltered</code>; changes to one affect the\n other.\n\n <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have\n iterators that don't support <code>remove()</code>, but all other methods are supported by the map\n and its views. When given a key that doesn't satisfy the predicate, the map's <code>put()</code> and\n <code>putAll()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>.\n\n <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map\n or its views, only mappings whose keys satisfy the filter will be removed from the underlying\n map.\n\n <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value\n mapping in the underlying map and determine which satisfy the filter. When a live view is\n <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n\n <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "keyPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static NavigableMap<K,V> <K,V>filterKeys(NavigableMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  returns:
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(java.util.SortedMap<K,V>,com.azure.cosmos.implementation.guava25.base.Predicate<? super K>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>filterKeys(SortedMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  name: "<K,V>filterKeys(SortedMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  nameWithType: "Maps.<K,V>filterKeys(SortedMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  summary: "Returns a sorted map containing the mappings in <code>unfiltered</code> whose keys satisfy a\n predicate. The returned map is a live view of <code>unfiltered</code>; changes to one affect the\n other.\n\n <p>The resulting map's <code>keySet()</code>, <code>entrySet()</code>, and <code>values()</code> views have\n iterators that don't support <code>remove()</code>, but all other methods are supported by the map\n and its views. When given a key that doesn't satisfy the predicate, the map's <code>put()</code> and\n <code>putAll()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>.\n\n <p>When methods such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered map\n or its views, only mappings whose keys satisfy the filter will be removed from the underlying\n map.\n\n <p>The returned map isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered map's methods, such as <code>size()</code>, iterate across every key/value\n mapping in the underlying map and determine which satisfy the filter. When a live view is\n <i>not</i> needed, it may be faster to copy the filtered map and use the copy.\n\n <p><b>Warning:</b> <code>keyPredicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.SortedMap?alt=java.util.SortedMap&text=SortedMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "keyPredicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super K?alt=? super K&text=? super K\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static SortedMap<K,V> <K,V>filterKeys(SortedMap<K,V> unfiltered, Predicate<? super K> keyPredicate)"
  returns:
    type: "<xref href=\"java.util.SortedMap?alt=java.util.SortedMap&text=SortedMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.3.2-beta.2

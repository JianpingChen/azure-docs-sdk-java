### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.base.Throwables.propagate*"
fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.propagate"
name: "propagate"
nameWithType: "Throwables.propagate"
members:
- uid: "com.azure.cosmos.implementation.guava25.base.Throwables.propagate(java.lang.Throwable)"
  fullName: "com.azure.cosmos.implementation.guava25.base.Throwables.propagate(Throwable throwable)"
  name: "propagate(Throwable throwable)"
  nameWithType: "Throwables.propagate(Throwable throwable)"
  summary: "Propagates <code>throwable</code> as-is if it is an instance of <xref uid=\"RuntimeException\" data-throw-if-not-resolved=\"false\">RuntimeException</xref> or <xref uid=\"Error\" data-throw-if-not-resolved=\"false\">Error</xref>, or else as a last resort, wraps it in a <code>RuntimeException</code> and then propagates.\n\n <p>This method always throws an exception. The <code>RuntimeException</code> return type allows\n client code to signal to the compiler that statements after the call are unreachable. Example\n usage:\n\n <pre>\n T doSomething() {\n   try {\n     return someMethodThatCouldThrowAnything();\n   } catch (IKnowWhatToDoWithThisException e) {\n     return handle(e);\n   } catch (Throwable t) {\n     throw Throwables.propagate(t);\n   }\n }\n </pre>"
  parameters:
  - description: "the Throwable to propagate"
    name: "throwable"
    type: "<xref href=\"java.lang.Throwable?alt=java.lang.Throwable&text=Throwable\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public static RuntimeException propagate(Throwable throwable)"
  returns:
    description: "nothing will ever be returned; this return type is only for your convenience, as\n     illustrated in the example above"
    type: "<xref href=\"java.lang.RuntimeException?alt=java.lang.RuntimeException&text=RuntimeException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.base"
artifact: com.azure:azure-cosmos:4.3.2-beta.2

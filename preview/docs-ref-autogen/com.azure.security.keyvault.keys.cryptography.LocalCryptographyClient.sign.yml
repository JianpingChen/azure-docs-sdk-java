### YamlMime:JavaMember
uid: "com.azure.security.keyvault.keys.cryptography.LocalCryptographyClient.sign*"
fullName: "com.azure.security.keyvault.keys.cryptography.LocalCryptographyClient.sign"
name: "sign"
nameWithType: "LocalCryptographyClient.sign"
members:
- uid: "com.azure.security.keyvault.keys.cryptography.LocalCryptographyClient.sign(com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm,byte[])"
  fullName: "com.azure.security.keyvault.keys.cryptography.LocalCryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  name: "sign(SignatureAlgorithm algorithm, byte[] digest)"
  nameWithType: "LocalCryptographyClient.sign(SignatureAlgorithm algorithm, byte[] digest)"
  summary: "Creates a signature from a digest using the configured key. The sign operation supports both asymmetric and\n symmetric keys. This operation requires the keys/sign permission.\n\n <p>The <xref uid=\"SignatureAlgorithm\" data-throw-if-not-resolved=\"false\">signature algorithm</xref> indicates the type of algorithm to use to create the\n signature from the digest. Possible values include:\n <xref uid=\"SignatureAlgorithm#ES256\" data-throw-if-not-resolved=\"false\">ES256</xref>, <xref uid=\"SignatureAlgorithm#ES384\" data-throw-if-not-resolved=\"false\">E384</xref>,\n <xref uid=\"SignatureAlgorithm#ES512\" data-throw-if-not-resolved=\"false\">ES512</xref>, <xref uid=\"SignatureAlgorithm#ES256K\" data-throw-if-not-resolved=\"false\">ES246K</xref></p>\n\n <p><strong>Code Samples</strong></p>\n <p>Sings the digest. Subscribes to the call asynchronously and prints out the signature details when a response\n has been received.</p>\n <pre>\n byte[] data = new byte[100];\n new Random&#40;0x1234567L&#41;.nextBytes&#40;data&#41;;\n MessageDigest md = MessageDigest.getInstance&#40;&quot;SHA-256&quot;&#41;;\n md.update&#40;data&#41;;\n byte[] digest = md.digest&#40;&#41;;\n SignResult signResult = cryptographyClient.sign&#40;SignatureAlgorithm.ES256, digest&#41;;\n System.out.printf&#40;&quot;Received signature of length %d with algorithm %s&quot;, signResult.getSignature&#40;&#41;.length,\n     signResult.getAlgorithm&#40;&#41;.toString&#40;&#41;&#41;;\n </pre>"
  parameters:
  - description: "The algorithm to use for signing."
    name: "algorithm"
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.SignatureAlgorithm&text=SignatureAlgorithm\" data-throw-if-not-resolved=\"False\" />"
  - description: "The content from which signature is to be created."
    name: "digest"
    type: "<xref href=\"byte?alt=byte&text=byte\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public SignResult sign(SignatureAlgorithm algorithm, byte[] digest)"
  returns:
    description: "A <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult\" data-throw-if-not-resolved=\"false\">SignResult</xref> whose <xref uid=\"com.azure.security.keyvault.keys.cryptography.models.SignResult.getSignature()\" data-throw-if-not-resolved=\"false\">signature</xref> contains the created signature."
    type: "<xref href=\"com.azure.security.keyvault.keys.cryptography.models.SignResult?alt=com.azure.security.keyvault.keys.cryptography.models.SignResult&text=SignResult\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.keys.cryptography"
artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4

### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.cycle*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle"
name: "<T>cycle"
nameWithType: "Iterables.<T>cycle"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T...)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T[] elements)"
  name: "<T>cycle(T[] elements)"
  nameWithType: "Iterables.<T>cycle(T[] elements)"
  summary: "Returns an iterable whose iterators cycle indefinitely over the provided elements.\n\n <p>After <code>remove</code> is invoked on a generated iterator, the removed element will no longer\n appear in either that iterator or any other iterator created from the same source iterable.\n That is, this method behaves exactly as <code>Iterables.cycle(Lists.newArrayList(elements))</code>.\n The iterator's <code>hasNext</code> method returns <code>true</code> until all of the original elements\n have been removed.\n\n <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\n should use an explicit <code>break</code> or be certain that you will eventually remove all the\n elements.\n\n <p>To cycle over the elements <code>n</code> times, use the following: <code>\n Iterables.concat(Collections.nCopies(n, Arrays.asList(elements)))</code>\n\n <p><b>Java 8 users:</b> If passing a single element <code>e</code>, the <code>Stream</code> equivalent of\n this method is <code>Stream.generate(() -> e)</code>. Otherwise, put the elements in a collection\n and use <code>Stream.generate(() -> collection).flatMap(Collection::stream)</code>."
  parameters:
  - name: "elements"
    type: "<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />[]"
  syntax: "public static Iterable<T> <T>cycle(T[] elements)"
  returns:
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(java.lang.Iterable<T>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(Iterable<T> iterable)"
  name: "<T>cycle(Iterable<T> iterable)"
  nameWithType: "Iterables.<T>cycle(Iterable<T> iterable)"
  summary: "Returns an iterable whose iterators cycle indefinitely over the elements of <code>iterable</code>.\n\n <p>That iterator supports <code>remove()</code> if <code>iterable.iterator()</code> does. After <code>\n remove()</code> is called, subsequent cycles omit the removed element, which is no longer in <code>\n iterable</code>. The iterator's <code>hasNext()</code> method returns <code>true</code> until <code>iterable</code>\n is empty.\n\n <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\n should use an explicit <code>break</code> or be certain that you will eventually remove all the\n elements.\n\n <p>To cycle over the iterable <code>n</code> times, use the following: <code>\n Iterables.concat(Collections.nCopies(n, iterable))</code>\n\n <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>\n Stream.generate(() -> iterable).flatMap(Streams::stream)</code>."
  parameters:
  - name: "iterable"
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Iterable<T> <T>cycle(Iterable<T> iterable)"
  returns:
    type: "<xref href=\"java.lang.Iterable?alt=java.lang.Iterable&text=Iterable\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"T?alt=T&text=T\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.3.2-beta.2

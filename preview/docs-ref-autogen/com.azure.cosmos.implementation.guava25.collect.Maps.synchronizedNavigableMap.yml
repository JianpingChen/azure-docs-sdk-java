### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Maps.synchronizedNavigableMap*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>synchronizedNavigableMap"
name: "<K,V>synchronizedNavigableMap"
nameWithType: "Maps.<K,V>synchronizedNavigableMap"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>synchronizedNavigableMap(java.util.NavigableMap<K,V>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Maps.<K,V>synchronizedNavigableMap(NavigableMap<K,V> navigableMap)"
  name: "<K,V>synchronizedNavigableMap(NavigableMap<K,V> navigableMap)"
  nameWithType: "Maps.<K,V>synchronizedNavigableMap(NavigableMap<K,V> navigableMap)"
  summary: "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In\n order to guarantee serial access, it is critical that <b>all</b> access to the backing\n navigable map is accomplished through the returned navigable map (or its views).\n\n <p>It is imperative that the user manually synchronize on the returned navigable map when\n iterating over any of its collection views, or the collections views of any of its <code>\n descendingMap</code>, <code>subMap</code>, <code>headMap</code> or <code>tailMap</code> views.\n\n <pre><code>\n NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());\n\n // Needn't be in synchronized block\n NavigableSet<K> set = map.navigableKeySet();\n\n synchronized (map) { // Synchronizing on map, not set!\n   Iterator<K> it = set.iterator(); // Must be in synchronized block\n   while (it.hasNext()) {\n     foo(it.next());\n   }\n }\n </code></pre>\n\n <p>or:\n\n <pre><code>\n NavigableMap<K, V> map = synchronizedNavigableMap(new TreeMap<K, V>());\n NavigableMap<K, V> map2 = map.subMap(foo, false, bar, true);\n\n // Needn't be in synchronized block\n NavigableSet<K> set2 = map2.descendingKeySet();\n\n synchronized (map) { // Synchronizing on map, not map2 or set2!\n   Iterator<K> it = set2.iterator(); // Must be in synchronized block\n   while (it.hasNext()) {\n     foo(it.next());\n   }\n }\n </code></pre>\n\n <p>Failure to follow this advice may result in non-deterministic behavior.\n\n <p>The returned navigable map will be serializable if the specified navigable map is\n serializable."
  parameters:
  - description: "the navigable map to be \"wrapped\" in a synchronized navigable map."
    name: "navigableMap"
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static NavigableMap<K,V> <K,V>synchronizedNavigableMap(NavigableMap<K,V> navigableMap)"
  returns:
    description: "a synchronized view of the specified navigable map."
    type: "<xref href=\"java.util.NavigableMap?alt=java.util.NavigableMap&text=NavigableMap\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"K?alt=K&text=K\" data-throw-if-not-resolved=\"False\" />,<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.3.2-beta.2

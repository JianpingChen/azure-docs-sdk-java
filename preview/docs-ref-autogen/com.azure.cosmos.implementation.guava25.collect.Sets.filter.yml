### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Sets.filter*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter"
name: "<E>filter"
nameWithType: "Sets.<E>filter"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(java.util.NavigableSet<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(NavigableSet<E> unfiltered, Predicate<? super E> predicate)"
  name: "<E>filter(NavigableSet<E> unfiltered, Predicate<? super E> predicate)"
  nameWithType: "Sets.<E>filter(NavigableSet<E> unfiltered, Predicate<? super E> predicate)"
  summary: "Returns the elements of a <code>NavigableSet</code>, <code>unfiltered</code>, that satisfy a predicate.\n The returned set is a live view of <code>unfiltered</code>; changes to one affect the other.\n\n <p>The resulting set's iterator does not support <code>remove()</code>, but all other set methods\n are supported. When given an element that doesn't satisfy the predicate, the set's <code>\n add()</code> and <code>addAll()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>. When methods\n such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered set, only elements\n that satisfy the filter will be removed from the underlying set.\n\n <p>The returned set isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered set's methods, such as <code>size()</code>, iterate across every element in\n the underlying set and determine which elements satisfy the filter. When a live view is\n <i>not</i> needed, it may be faster to copy <code>Iterables.filter(unfiltered, predicate)</code> and\n use the copy.\n\n <p><b>Warning:</b> <code>predicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals. (See <xref uid=\"Iterables#filter(Iterable, Class)\" data-throw-if-not-resolved=\"false\">Iterables#filter(Iterable, Class)</xref> for related functionality.)"
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.NavigableSet?alt=java.util.NavigableSet&text=NavigableSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "predicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super E?alt=? super E&text=? super E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static NavigableSet<E> <E>filter(NavigableSet<E> unfiltered, Predicate<? super E> predicate)"
  returns:
    type: "<xref href=\"java.util.NavigableSet?alt=java.util.NavigableSet&text=NavigableSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(java.util.Set<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(Set<E> unfiltered, Predicate<? super E> predicate)"
  name: "<E>filter(Set<E> unfiltered, Predicate<? super E> predicate)"
  nameWithType: "Sets.<E>filter(Set<E> unfiltered, Predicate<? super E> predicate)"
  summary: "Returns the elements of <code>unfiltered</code> that satisfy a predicate. The returned set is a live\n view of <code>unfiltered</code>; changes to one affect the other.\n\n <p>The resulting set's iterator does not support <code>remove()</code>, but all other set methods\n are supported. When given an element that doesn't satisfy the predicate, the set's <code>\n add()</code> and <code>addAll()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>. When methods\n such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered set, only elements\n that satisfy the filter will be removed from the underlying set.\n\n <p>The returned set isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered set's methods, such as <code>size()</code>, iterate across every element in\n the underlying set and determine which elements satisfy the filter. When a live view is\n <i>not</i> needed, it may be faster to copy <code>Iterables.filter(unfiltered, predicate)</code> and\n use the copy.\n\n <p><b>Warning:</b> <code>predicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals. (See <xref uid=\"Iterables#filter(Iterable, Class)\" data-throw-if-not-resolved=\"false\">Iterables#filter(Iterable, Class)</xref> for related functionality.)\n\n <p><b>Java 8 users:</b> many use cases for this method are better addressed by <xref uid=\"java.util.stream.Stream#filter\" data-throw-if-not-resolved=\"false\">java.util.stream.Stream#filter</xref>. This method is not being deprecated, but we gently encourage\n you to migrate to streams."
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "predicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super E?alt=? super E&text=? super E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static Set<E> <E>filter(Set<E> unfiltered, Predicate<? super E> predicate)"
  returns:
    type: "<xref href=\"java.util.Set?alt=java.util.Set&text=Set\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
- uid: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(java.util.SortedSet<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Sets.<E>filter(SortedSet<E> unfiltered, Predicate<? super E> predicate)"
  name: "<E>filter(SortedSet<E> unfiltered, Predicate<? super E> predicate)"
  nameWithType: "Sets.<E>filter(SortedSet<E> unfiltered, Predicate<? super E> predicate)"
  summary: "Returns the elements of a <code>SortedSet</code>, <code>unfiltered</code>, that satisfy a predicate. The\n returned set is a live view of <code>unfiltered</code>; changes to one affect the other.\n\n <p>The resulting set's iterator does not support <code>remove()</code>, but all other set methods\n are supported. When given an element that doesn't satisfy the predicate, the set's <code>\n add()</code> and <code>addAll()</code> methods throw an <xref uid=\"IllegalArgumentException\" data-throw-if-not-resolved=\"false\">IllegalArgumentException</xref>. When methods\n such as <code>removeAll()</code> and <code>clear()</code> are called on the filtered set, only elements\n that satisfy the filter will be removed from the underlying set.\n\n <p>The returned set isn't threadsafe or serializable, even if <code>unfiltered</code> is.\n\n <p>Many of the filtered set's methods, such as <code>size()</code>, iterate across every element in\n the underlying set and determine which elements satisfy the filter. When a live view is\n <i>not</i> needed, it may be faster to copy <code>Iterables.filter(unfiltered, predicate)</code> and\n use the copy.\n\n <p><b>Warning:</b> <code>predicate</code> must be <i>consistent with equals</i>, as documented at\n <xref uid=\"Predicate#apply\" data-throw-if-not-resolved=\"false\">Predicate#apply</xref>. Do not provide a predicate such as <code>\n Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals. (See <xref uid=\"Iterables#filter(Iterable, Class)\" data-throw-if-not-resolved=\"false\">Iterables#filter(Iterable, Class)</xref> for related functionality.)"
  parameters:
  - name: "unfiltered"
    type: "<xref href=\"java.util.SortedSet?alt=java.util.SortedSet&text=SortedSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "predicate"
    type: "<xref href=\"com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super E?alt=? super E&text=? super E\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static SortedSet<E> <E>filter(SortedSet<E> unfiltered, Predicate<? super E> predicate)"
  returns:
    type: "<xref href=\"java.util.SortedSet?alt=java.util.SortedSet&text=SortedSet\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"E?alt=E&text=E\" data-throw-if-not-resolved=\"False\" />&gt;"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.3.2-beta.2

### YamlMime:JavaMember
uid: "com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse*"
fullName: "com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse"
name: "getKeyWithResponse"
nameWithType: "KeyAsyncClient.getKeyWithResponse"
members:
- uid: "com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse(java.lang.String,java.lang.String)"
  fullName: "com.azure.security.keyvault.keys.KeyAsyncClient.getKeyWithResponse(String name, String version)"
  name: "getKeyWithResponse(String name, String version)"
  nameWithType: "KeyAsyncClient.getKeyWithResponse(String name, String version)"
  summary: "Gets the public part of the specified key and key version. The get key operation is applicable to all key types\n and it requires the <code>keys/get</code> permission.\n\n <p><strong>Code Samples</strong></p>\n <p>Gets a specific version of the key in the key vault. Subscribes to the call asynchronously and prints out the\n returned key details when a response has been received.</p>\n\n <pre>\n String keyVersion = &quot;6A385B124DEF4096AF1361A85B16C204&quot;;\n keyAsyncClient.getKeyWithResponse&#40;&quot;keyName&quot;, keyVersion&#41;\n     .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;\n     .subscribe&#40;keyResponse -&gt;\n         System.out.printf&#40;&quot;Key is created with name %s and id %s %n&quot;,\n             keyResponse.getValue&#40;&#41;.getName&#40;&#41;, keyResponse.getValue&#40;&#41;.getId&#40;&#41;&#41;&#41;;\n </pre>"
  parameters:
  - description: "The name of the key, cannot be null"
    name: "name"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - description: "The version of the key to retrieve. If this is an empty String or null, this call is\n     equivalent to calling <xref uid=\"com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String)\" data-throw-if-not-resolved=\"false\">KeyAsyncClient#getKey(String)</xref>, with the latest version being retrieved."
    name: "version"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public Mono<Response<KeyVaultKey>> getKeyWithResponse(String name, String version)"
  returns:
    description: "A <xref uid=\"reactor.core.publisher.Mono\" data-throw-if-not-resolved=\"false\">Mono</xref> containing a <xref uid=\"com.azure.core.http.rest.Response\" data-throw-if-not-resolved=\"false\">Response</xref> whose <xref uid=\"com.azure.core.http.rest.Response.getValue*\" data-throw-if-not-resolved=\"false\">value</xref> contains the requested\n     <xref uid=\"com.azure.security.keyvault.keys.models.KeyVaultKey\" data-throw-if-not-resolved=\"false\">key</xref>. The content of the key is null if both <code>name</code> and <code>version</code>\n     are null or empty."
    type: "<xref href=\"reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey\" data-throw-if-not-resolved=\"False\" />&gt;&gt;"
type: "method"
metadata: {}
package: "com.azure.security.keyvault.keys"
artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4

### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.Streams.forEachPair*"
fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.<A,B>forEachPair"
name: "<A,B>forEachPair"
nameWithType: "Streams.<A,B>forEachPair"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.Streams.<A,B>forEachPair(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiConsumer<? super A,? super B>)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.Streams.<A,B>forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)"
  name: "<A,B>forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)"
  nameWithType: "Streams.<A,B>forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)"
  summary: "Invokes <code>consumer</code> once for each pair of <i>corresponding</i> elements in <code>streamA</code>\n and <code>streamB</code>. If one stream is longer than the other, the extra elements are silently\n ignored. Elements passed to the consumer are guaranteed to come from the same position in their\n respective source streams. For example:\n\n <pre><code>\n Streams.forEachPair(\n   Stream.of(\"foo1\", \"foo2\", \"foo3\"),\n   Stream.of(\"bar1\", \"bar2\"),\n   (arg1, arg2) -> System.out.println(arg1 + \":\" + arg2)\n </code></pre>\n\n <p>will print:\n\n <pre><code>\n foo1:bar1\n foo2:bar2\n </code></pre>\n\n <p><b>Warning:</b> If either supplied stream is a parallel stream, the same correspondence\n between elements will be made, but the order in which those pairs of elements are passed to the\n consumer is <i>not</i> defined.\n\n <p>Note that many usages of this method can be replaced with simpler calls to <xref uid=\"#zip\" data-throw-if-not-resolved=\"false\">#zip</xref>.\n This method behaves equivalently to <xref uid=\"#zip\" data-throw-if-not-resolved=\"false\">zipping</xref> the stream elements into\n temporary pair objects and then using <xref uid=\"Stream#forEach\" data-throw-if-not-resolved=\"false\">Stream#forEach</xref> on that stream."
  parameters:
  - name: "streamA"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"A?alt=A&text=A\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "streamB"
    type: "<xref href=\"java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"B?alt=B&text=B\" data-throw-if-not-resolved=\"False\" />&gt;"
  - name: "consumer"
    type: "<xref href=\"java.util.function.BiConsumer?alt=java.util.function.BiConsumer&text=BiConsumer\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"? super A?alt=? super A&text=? super A\" data-throw-if-not-resolved=\"False\" />,<xref href=\"? super B?alt=? super B&text=? super B\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public static void <A,B>forEachPair(Stream<A> streamA, Stream<B> streamB, BiConsumer<? super A,? super B> consumer)"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.3.2-beta.2

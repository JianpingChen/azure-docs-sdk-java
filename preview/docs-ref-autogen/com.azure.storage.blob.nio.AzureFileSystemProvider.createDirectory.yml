### YamlMime:JavaMember
uid: "com.azure.storage.blob.nio.AzureFileSystemProvider.createDirectory*"
fullName: "com.azure.storage.blob.nio.AzureFileSystemProvider.createDirectory"
name: "createDirectory"
nameWithType: "AzureFileSystemProvider.createDirectory"
members:
- uid: "com.azure.storage.blob.nio.AzureFileSystemProvider.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)"
  fullName: "com.azure.storage.blob.nio.AzureFileSystemProvider.createDirectory(Path path, FileAttribute<?>[] fileAttributes)"
  name: "createDirectory(Path path, FileAttribute<?>[] fileAttributes)"
  nameWithType: "AzureFileSystemProvider.createDirectory(Path path, FileAttribute<?>[] fileAttributes)"
  summary: "Creates a new directory at the specified path.\n <p>\n The existence of a directory in the <code>AzureFileSystem</code> is defined on two levels. <i>Weak existence</i> is\n defined by the presence of a non-zero number of blobs prefixed with the directory's path. This concept is also\n known as a  <i>virtual directory</i> and enables the file system to work with containers that were pre-loaded\n with data by another source but need to be accessed by this file system. <i>Strong existence</i> is defined as\n the presence of an actual storage resource at the given path, which in the case of directories, is a zero-length\n blob whose name is the directory path with a particular metadata field indicating the blob's status as a\n directory. This is also known as a <i>concrete directory</i>. Directories created by this file system will\n strongly exist. Operations targeting directories themselves as the object (e.g. setting properties) will target\n marker blobs underlying concrete directories. Other operations (e.g. listing) will operate on the blob-name\n prefix.\n <p>\n This method fulfills the nio contract of: \"The check for the existence of the file and the creation of the\n directory if it does not exist are a single operation that is atomic with respect to all other filesystem\n activities that might affect the directory.\" More specifically, this method will atomically check for <i>strong\n existence</i> of another file or directory at the given path and fail if one is present. On the other hand, we\n only check for <i>weak existence</i> of the parent to determine if the given path is valid. Additionally, the\n action of checking whether the parent exists, is <i>not</i> atomic with the creation of the directory. Note that\n while it is possible that the parent may be deleted between when the parent is determined to exist and the\n creation of the child, the creation of the child will always ensure the existence of a virtual parent, so the\n child will never be left floating and unreachable. The different checks on parent and child is due to limitations\n in the Storage service API.\n <p>\n There may be some unintuitive behavior when working with directories in this file system, particularly virtual\n directories (usually those not created by this file system). A virtual directory will disappear as soon as all\n its children have been deleted. Furthermore, if a directory with the given path weakly exists at the time of\n calling this method, this method will still return success and create a concrete directory at the target\n location. In other words, it is possible to \"double create\" a directory if it first weakly exists and then is\n strongly created. This is both because it is impossible to atomically check if a virtual directory exists while\n creating a concrete directory and because such behavior will have minimal side effects--no files will be\n overwritten and the directory will still be available for writing as intended, though it may not be empty. This\n is not a complete list of such unintuitive behavior.\n <p>\n This method will attempt to extract standard HTTP content headers from the list of file attributes to set them\n as blob headers. All other attributes will be set as blob metadata. The value of every attribute will be\n converted to a <code>String</code> with the exception of the Content-MD5 attribute which expects a <code>byte[]</code>.\n When extracting the content headers, the following strings will be used for comparison (constants for these\n values can be found on this type):\n <ul>\n     <li><code>Content-Type</code></li>\n     <li><code>Content-Disposition</code></li>\n     <li><code>Content-Language</code></li>\n     <li><code>Content-Encoding</code></li>\n     <li><code>Content-MD5</code></li>\n     <li><code>Cache-Control</code></li>\n </ul>\n Note that these properties also have a particular semantic in that if one is specified, all are updated. In other\n words, if any of the above is set, all those that are not set will be cleared. See the\n <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\">Azure Docs</a> for more\n information."
  overridden: "java.nio.file.spi.FileSystemProvider.createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)"
  parameters:
  - description: "the directory to create"
    name: "path"
    type: "<xref href=\"java.nio.file.Path?alt=java.nio.file.Path&text=Path\" data-throw-if-not-resolved=\"False\" />"
  - description: "an optional list of file attributes to set atomically when creating the directory"
    name: "fileAttributes"
    type: "<xref href=\"java.nio.file.attribute.FileAttribute?alt=java.nio.file.attribute.FileAttribute&text=FileAttribute\" data-throw-if-not-resolved=\"False\" />&lt;?&gt;[]"
  syntax: "public void createDirectory(Path path, FileAttribute<?>[] fileAttributes)"
  exceptions:
  - description: "If the path type is not an instance of <xref uid=\"AzurePath\" data-throw-if-not-resolved=\"false\">AzurePath</xref>."
    type: "<xref href=\"java.io.IOException?alt=java.io.IOException&text=IOException\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.storage.blob.nio"
artifact: com.azure:azure-storage-blob-nio:12.0.0-beta.2

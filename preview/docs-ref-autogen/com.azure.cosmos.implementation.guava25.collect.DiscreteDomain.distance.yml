### YamlMime:JavaMember
uid: "com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.distance*"
fullName: "com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.distance"
name: "distance"
nameWithType: "DiscreteDomain<C>.distance"
members:
- uid: "com.azure.cosmos.implementation.guava25.collect.DiscreteDomain.distance(C,C)"
  fullName: "com.azure.cosmos.implementation.guava25.collect.DiscreteDomain<C>.distance(C start, C end)"
  name: "distance(C start, C end)"
  nameWithType: "DiscreteDomain<C>.distance(C start, C end)"
  summary: "Returns a signed value indicating how many nested invocations of <xref uid=\"#next\" data-throw-if-not-resolved=\"false\">#next</xref> (if positive) or\n <xref uid=\"#previous\" data-throw-if-not-resolved=\"false\">#previous</xref> (if negative) are needed to reach <code>end</code> starting from <code>start</code>.\n For example, if <code>end = next(next(next(start)))</code>, then <code>distance(start, end) == 3</code>\n and <code>distance(end, start) == -3</code>. As well, <code>distance(a, a)</code> is always zero.\n\n <p>Note that this function is necessarily well-defined for any discrete type."
  parameters:
  - name: "start"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  - name: "end"
    type: "<xref href=\"C?alt=C&text=C\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public abstract long distance(C start, C end)"
  returns:
    description: "the distance as described above, or <xref uid=\"java.lang.Long.MIN_VALUE\" data-throw-if-not-resolved=\"false\">Long#MIN_VALUE</xref> or <xref uid=\"java.lang.Long.MAX_VALUE\" data-throw-if-not-resolved=\"false\">Long#MAX_VALUE</xref> if\n     the distance is too small or too large, respectively."
    type: "<xref href=\"long?alt=long&text=long\" data-throw-if-not-resolved=\"False\" />"
type: "method"
metadata: {}
package: "com.azure.cosmos.implementation.guava25.collect"
artifact: com.azure:azure-cosmos:4.3.2-beta.2
